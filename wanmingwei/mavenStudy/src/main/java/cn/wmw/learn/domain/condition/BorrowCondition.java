package cn.wmw.learn.domain.condition;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class BorrowCondition {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table borrow
     *
     * @mbggenerated Sun Mar 18 16:21:05 CST 2018
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table borrow
     *
     * @mbggenerated Sun Mar 18 16:21:05 CST 2018
     */
    protected String limit;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table borrow
     *
     * @mbggenerated Sun Mar 18 16:21:05 CST 2018
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table borrow
     *
     * @mbggenerated Sun Mar 18 16:21:05 CST 2018
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table borrow
     *
     * @mbggenerated Sun Mar 18 16:21:05 CST 2018
     */
    public BorrowCondition() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table borrow
     *
     * @mbggenerated Sun Mar 18 16:21:05 CST 2018
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table borrow
     *
     * @mbggenerated Sun Mar 18 16:21:05 CST 2018
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table borrow
     *
     * @mbggenerated Sun Mar 18 16:21:05 CST 2018
     */
    public void setLimit(String limit) {
        this.limit = limit;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table borrow
     *
     * @mbggenerated Sun Mar 18 16:21:05 CST 2018
     */
    public String getLimit() {
        return limit;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table borrow
     *
     * @mbggenerated Sun Mar 18 16:21:05 CST 2018
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table borrow
     *
     * @mbggenerated Sun Mar 18 16:21:05 CST 2018
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table borrow
     *
     * @mbggenerated Sun Mar 18 16:21:05 CST 2018
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table borrow
     *
     * @mbggenerated Sun Mar 18 16:21:05 CST 2018
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table borrow
     *
     * @mbggenerated Sun Mar 18 16:21:05 CST 2018
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table borrow
     *
     * @mbggenerated Sun Mar 18 16:21:05 CST 2018
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table borrow
     *
     * @mbggenerated Sun Mar 18 16:21:05 CST 2018
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table borrow
     *
     * @mbggenerated Sun Mar 18 16:21:05 CST 2018
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table borrow
     *
     * @mbggenerated Sun Mar 18 16:21:05 CST 2018
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andBorIdIsNull() {
            addCriterion("bor_id is null");
            return (Criteria) this;
        }

        public Criteria andBorIdIsNotNull() {
            addCriterion("bor_id is not null");
            return (Criteria) this;
        }

        public Criteria andBorIdEqualTo(Integer value) {
            addCriterion("bor_id =", value, "borId");
            return (Criteria) this;
        }

        public Criteria andBorIdNotEqualTo(Integer value) {
            addCriterion("bor_id <>", value, "borId");
            return (Criteria) this;
        }

        public Criteria andBorIdGreaterThan(Integer value) {
            addCriterion("bor_id >", value, "borId");
            return (Criteria) this;
        }

        public Criteria andBorIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("bor_id >=", value, "borId");
            return (Criteria) this;
        }

        public Criteria andBorIdLessThan(Integer value) {
            addCriterion("bor_id <", value, "borId");
            return (Criteria) this;
        }

        public Criteria andBorIdLessThanOrEqualTo(Integer value) {
            addCriterion("bor_id <=", value, "borId");
            return (Criteria) this;
        }

        public Criteria andBorIdIn(List<Integer> values) {
            addCriterion("bor_id in", values, "borId");
            return (Criteria) this;
        }

        public Criteria andBorIdNotIn(List<Integer> values) {
            addCriterion("bor_id not in", values, "borId");
            return (Criteria) this;
        }

        public Criteria andBorIdBetween(Integer value1, Integer value2) {
            addCriterion("bor_id between", value1, value2, "borId");
            return (Criteria) this;
        }

        public Criteria andBorIdNotBetween(Integer value1, Integer value2) {
            addCriterion("bor_id not between", value1, value2, "borId");
            return (Criteria) this;
        }

        public Criteria andUserIdIsNull() {
            addCriterion("user_id is null");
            return (Criteria) this;
        }

        public Criteria andUserIdIsNotNull() {
            addCriterion("user_id is not null");
            return (Criteria) this;
        }

        public Criteria andUserIdEqualTo(Integer value) {
            addCriterion("user_id =", value, "userId");
            return (Criteria) this;
        }

        public Criteria andUserIdNotEqualTo(Integer value) {
            addCriterion("user_id <>", value, "userId");
            return (Criteria) this;
        }

        public Criteria andUserIdGreaterThan(Integer value) {
            addCriterion("user_id >", value, "userId");
            return (Criteria) this;
        }

        public Criteria andUserIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("user_id >=", value, "userId");
            return (Criteria) this;
        }

        public Criteria andUserIdLessThan(Integer value) {
            addCriterion("user_id <", value, "userId");
            return (Criteria) this;
        }

        public Criteria andUserIdLessThanOrEqualTo(Integer value) {
            addCriterion("user_id <=", value, "userId");
            return (Criteria) this;
        }

        public Criteria andUserIdIn(List<Integer> values) {
            addCriterion("user_id in", values, "userId");
            return (Criteria) this;
        }

        public Criteria andUserIdNotIn(List<Integer> values) {
            addCriterion("user_id not in", values, "userId");
            return (Criteria) this;
        }

        public Criteria andUserIdBetween(Integer value1, Integer value2) {
            addCriterion("user_id between", value1, value2, "userId");
            return (Criteria) this;
        }

        public Criteria andUserIdNotBetween(Integer value1, Integer value2) {
            addCriterion("user_id not between", value1, value2, "userId");
            return (Criteria) this;
        }

        public Criteria andNumberIsNull() {
            addCriterion("number is null");
            return (Criteria) this;
        }

        public Criteria andNumberIsNotNull() {
            addCriterion("number is not null");
            return (Criteria) this;
        }

        public Criteria andNumberEqualTo(Integer value) {
            addCriterion("number =", value, "number");
            return (Criteria) this;
        }

        public Criteria andNumberNotEqualTo(Integer value) {
            addCriterion("number <>", value, "number");
            return (Criteria) this;
        }

        public Criteria andNumberGreaterThan(Integer value) {
            addCriterion("number >", value, "number");
            return (Criteria) this;
        }

        public Criteria andNumberGreaterThanOrEqualTo(Integer value) {
            addCriterion("number >=", value, "number");
            return (Criteria) this;
        }

        public Criteria andNumberLessThan(Integer value) {
            addCriterion("number <", value, "number");
            return (Criteria) this;
        }

        public Criteria andNumberLessThanOrEqualTo(Integer value) {
            addCriterion("number <=", value, "number");
            return (Criteria) this;
        }

        public Criteria andNumberIn(List<Integer> values) {
            addCriterion("number in", values, "number");
            return (Criteria) this;
        }

        public Criteria andNumberNotIn(List<Integer> values) {
            addCriterion("number not in", values, "number");
            return (Criteria) this;
        }

        public Criteria andNumberBetween(Integer value1, Integer value2) {
            addCriterion("number between", value1, value2, "number");
            return (Criteria) this;
        }

        public Criteria andNumberNotBetween(Integer value1, Integer value2) {
            addCriterion("number not between", value1, value2, "number");
            return (Criteria) this;
        }

        public Criteria andBorAmountIsNull() {
            addCriterion("bor_amount is null");
            return (Criteria) this;
        }

        public Criteria andBorAmountIsNotNull() {
            addCriterion("bor_amount is not null");
            return (Criteria) this;
        }

        public Criteria andBorAmountEqualTo(Integer value) {
            addCriterion("bor_amount =", value, "borAmount");
            return (Criteria) this;
        }

        public Criteria andBorAmountNotEqualTo(Integer value) {
            addCriterion("bor_amount <>", value, "borAmount");
            return (Criteria) this;
        }

        public Criteria andBorAmountGreaterThan(Integer value) {
            addCriterion("bor_amount >", value, "borAmount");
            return (Criteria) this;
        }

        public Criteria andBorAmountGreaterThanOrEqualTo(Integer value) {
            addCriterion("bor_amount >=", value, "borAmount");
            return (Criteria) this;
        }

        public Criteria andBorAmountLessThan(Integer value) {
            addCriterion("bor_amount <", value, "borAmount");
            return (Criteria) this;
        }

        public Criteria andBorAmountLessThanOrEqualTo(Integer value) {
            addCriterion("bor_amount <=", value, "borAmount");
            return (Criteria) this;
        }

        public Criteria andBorAmountIn(List<Integer> values) {
            addCriterion("bor_amount in", values, "borAmount");
            return (Criteria) this;
        }

        public Criteria andBorAmountNotIn(List<Integer> values) {
            addCriterion("bor_amount not in", values, "borAmount");
            return (Criteria) this;
        }

        public Criteria andBorAmountBetween(Integer value1, Integer value2) {
            addCriterion("bor_amount between", value1, value2, "borAmount");
            return (Criteria) this;
        }

        public Criteria andBorAmountNotBetween(Integer value1, Integer value2) {
            addCriterion("bor_amount not between", value1, value2, "borAmount");
            return (Criteria) this;
        }

        public Criteria andBorDateIsNull() {
            addCriterion("bor_date is null");
            return (Criteria) this;
        }

        public Criteria andBorDateIsNotNull() {
            addCriterion("bor_date is not null");
            return (Criteria) this;
        }

        public Criteria andBorDateEqualTo(Date value) {
            addCriterion("bor_date =", value, "borDate");
            return (Criteria) this;
        }

        public Criteria andBorDateNotEqualTo(Date value) {
            addCriterion("bor_date <>", value, "borDate");
            return (Criteria) this;
        }

        public Criteria andBorDateGreaterThan(Date value) {
            addCriterion("bor_date >", value, "borDate");
            return (Criteria) this;
        }

        public Criteria andBorDateGreaterThanOrEqualTo(Date value) {
            addCriterion("bor_date >=", value, "borDate");
            return (Criteria) this;
        }

        public Criteria andBorDateLessThan(Date value) {
            addCriterion("bor_date <", value, "borDate");
            return (Criteria) this;
        }

        public Criteria andBorDateLessThanOrEqualTo(Date value) {
            addCriterion("bor_date <=", value, "borDate");
            return (Criteria) this;
        }

        public Criteria andBorDateIn(List<Date> values) {
            addCriterion("bor_date in", values, "borDate");
            return (Criteria) this;
        }

        public Criteria andBorDateNotIn(List<Date> values) {
            addCriterion("bor_date not in", values, "borDate");
            return (Criteria) this;
        }

        public Criteria andBorDateBetween(Date value1, Date value2) {
            addCriterion("bor_date between", value1, value2, "borDate");
            return (Criteria) this;
        }

        public Criteria andBorDateNotBetween(Date value1, Date value2) {
            addCriterion("bor_date not between", value1, value2, "borDate");
            return (Criteria) this;
        }

        public Criteria andBorTimeIsNull() {
            addCriterion("bor_time is null");
            return (Criteria) this;
        }

        public Criteria andBorTimeIsNotNull() {
            addCriterion("bor_time is not null");
            return (Criteria) this;
        }

        public Criteria andBorTimeEqualTo(Integer value) {
            addCriterion("bor_time =", value, "borTime");
            return (Criteria) this;
        }

        public Criteria andBorTimeNotEqualTo(Integer value) {
            addCriterion("bor_time <>", value, "borTime");
            return (Criteria) this;
        }

        public Criteria andBorTimeGreaterThan(Integer value) {
            addCriterion("bor_time >", value, "borTime");
            return (Criteria) this;
        }

        public Criteria andBorTimeGreaterThanOrEqualTo(Integer value) {
            addCriterion("bor_time >=", value, "borTime");
            return (Criteria) this;
        }

        public Criteria andBorTimeLessThan(Integer value) {
            addCriterion("bor_time <", value, "borTime");
            return (Criteria) this;
        }

        public Criteria andBorTimeLessThanOrEqualTo(Integer value) {
            addCriterion("bor_time <=", value, "borTime");
            return (Criteria) this;
        }

        public Criteria andBorTimeIn(List<Integer> values) {
            addCriterion("bor_time in", values, "borTime");
            return (Criteria) this;
        }

        public Criteria andBorTimeNotIn(List<Integer> values) {
            addCriterion("bor_time not in", values, "borTime");
            return (Criteria) this;
        }

        public Criteria andBorTimeBetween(Integer value1, Integer value2) {
            addCriterion("bor_time between", value1, value2, "borTime");
            return (Criteria) this;
        }

        public Criteria andBorTimeNotBetween(Integer value1, Integer value2) {
            addCriterion("bor_time not between", value1, value2, "borTime");
            return (Criteria) this;
        }

        public Criteria andBorReturnIsNull() {
            addCriterion("bor_return is null");
            return (Criteria) this;
        }

        public Criteria andBorReturnIsNotNull() {
            addCriterion("bor_return is not null");
            return (Criteria) this;
        }

        public Criteria andBorReturnEqualTo(Date value) {
            addCriterion("bor_return =", value, "borReturn");
            return (Criteria) this;
        }

        public Criteria andBorReturnNotEqualTo(Date value) {
            addCriterion("bor_return <>", value, "borReturn");
            return (Criteria) this;
        }

        public Criteria andBorReturnGreaterThan(Date value) {
            addCriterion("bor_return >", value, "borReturn");
            return (Criteria) this;
        }

        public Criteria andBorReturnGreaterThanOrEqualTo(Date value) {
            addCriterion("bor_return >=", value, "borReturn");
            return (Criteria) this;
        }

        public Criteria andBorReturnLessThan(Date value) {
            addCriterion("bor_return <", value, "borReturn");
            return (Criteria) this;
        }

        public Criteria andBorReturnLessThanOrEqualTo(Date value) {
            addCriterion("bor_return <=", value, "borReturn");
            return (Criteria) this;
        }

        public Criteria andBorReturnIn(List<Date> values) {
            addCriterion("bor_return in", values, "borReturn");
            return (Criteria) this;
        }

        public Criteria andBorReturnNotIn(List<Date> values) {
            addCriterion("bor_return not in", values, "borReturn");
            return (Criteria) this;
        }

        public Criteria andBorReturnBetween(Date value1, Date value2) {
            addCriterion("bor_return between", value1, value2, "borReturn");
            return (Criteria) this;
        }

        public Criteria andBorReturnNotBetween(Date value1, Date value2) {
            addCriterion("bor_return not between", value1, value2, "borReturn");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table borrow
     *
     * @mbggenerated do_not_delete_during_merge Sun Mar 18 16:21:05 CST 2018
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table borrow
     *
     * @mbggenerated Sun Mar 18 16:21:05 CST 2018
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}